<?php
    //get the webhook payload
    $requestBody = file_get_contents('php://input');

    include_once("../config.ini.php");
    require '../PayPal-PHP-SDK/autoload.php';
    use \PayPal\Api\VerifyWebhookSignature;
    use \PayPal\Api\WebhookEvent;

    // $apiContext = require __DIR__ . '/bootstrap.php';
    $apiContext = new \PayPal\Rest\ApiContext(
        new \PayPal\Auth\OAuthTokenCredential(
          PAYPAL_CLIENT_ID,
          PAYPAL_CLIENT_SECRET
        )
    );
    //check if webhook payload has data
    if($requestBody) {
        // $myfile = file_put_contents("/home/planiv5/public_html/paypal-hook/log.txt",  $requestBody, FILE_APPEND | LOCK_EX);
        $requestBody = json_decode($requestBody);
        //request body is set
        if($requestBody->event_type === 'PAYMENT.SALE.COMPLETED') {
            $myfile = file_put_contents("/home/planiv5/public_html/paypal-hook/log.txt", "Test Begin:" , FILE_APPEND | LOCK_EX);

        }


    }

    exit(); 
    ///////////////////////Security Later////////////////////////////////

    //Receive HTTP headers that you received from PayPal webhook.
    $headers = getallheaders();
    //need header keys to be UPPERCASE
    $headers = array_change_key_case($headers, CASE_UPPER);

    //if any of the relevant paypal signature headers are not set exit()
    if(
        (!array_key_exists('PAYPAL-AUTH-ALGO', $headers)) ||
        (!array_key_exists('PAYPAL-TRANSMISSION-ID', $headers)) ||
        (!array_key_exists('PAYPAL-CERT-URL', $headers)) ||
        (!array_key_exists('PAYPAL-TRANSMISSION-SIG', $headers)) ||
        (!array_key_exists('PAYPAL-TRANSMISSION-TIME', $headers)) 
    ) {
        exit();
    }
    //specify the ID for the webhook that you have set up on the paypal developer website, each web hook that you create has a unique ID
    $webhookID = PAYPAL_WEBHOOK_ID;

    $myfile = file_put_contents("/home/planiv5/public_html/paypal-hook/log.txt", $webhookID , FILE_APPEND | LOCK_EX);


    //start paypal webhook signature validation 

    $signatureVerification = new VerifyWebhookSignature();
    $signatureVerification->setAuthAlgo($headers['PAYPAL-AUTH-ALGO']);
    $signatureVerification->setTransmissionId($headers['PAYPAL-TRANSMISSION-ID']);
    $signatureVerification->setCertUrl($headers['PAYPAL-CERT-URL']);
    $signatureVerification->setWebhookId($webhookID); 
    $signatureVerification->setTransmissionSig($headers['PAYPAL-TRANSMISSION-SIG']);
    $signatureVerification->setTransmissionTime($headers['PAYPAL-TRANSMISSION-TIME']);

    $signatureVerification->setRequestBody($requestBody);
    $request = clone $signatureVerification;

    try {

        $output = $signatureVerification->post($apiContext);

    } catch (Exception $ex) {
        //error during signature validation, capture error and exit
        ResultPrinter::printError("Validate Received Webhook Event", "WebhookEvent", null, $request->toJSON(), $ex);
        exit(1);
    }
    $sigVerificationResult = $output->getVerificationStatus();

    // $sigVerificationResult is a string and will either be "SUCCESS" or "FAILURE"


    //if not webhook signature failed validation exit
    if($sigVerificationResult != "SUCCESS"){
        exit(); 
    }
    else if($sigVerificationResult == "SUCCESS"){

        //paypay webhook signature is valid

        //proceed to process webhook payload

        //decode raw request body

        $requestBodyDecode = json_decode($requestBody);


        //pull whatever info required from decoded request body, some examples below


        $paymentSystemID = $requestBodyDecode->id;


        $eventType = $requestBodyDecode->event_type;
        //do something with info captured from the webhook payload
        echo $eventType;
        // $myfile = fopen("/home/planiv5/public_html/paypal-hook/log.txt", "w+") or die("Unable to open file!");
        $myfile = file_put_contents("/home/planiv5/public_html/paypal-hook/log.txt", $eventType.PHP_EOL , FILE_APPEND | LOCK_EX);
        // $txt = $eventType;
        // fwrite($myfile, $txt);
        // fclose($myfile);

    } 